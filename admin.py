import logging
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputFile

from database import db
from states import user_states
from states.user_states import AdminState
from utils import helpers
import config

logger = logging.getLogger(__name__)

def register_admin_handlers(bot: AsyncTeleBot): 
    @bot.callback_query_handler(func=lambda call: call.data == "admin_panel")
    async def admin_panel_callback(call: CallbackQuery):
        user_id = call.from_user.id
        
        if not helpers.is_admin(user_id):
            await bot.answer_callback_query(call.id, "üôà –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        markup = helpers.get_admin_panel_markup()
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            "*üêµ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "create_room")
    async def create_room_callback(call: CallbackQuery):
        user_id = call.from_user.id
        
        if not helpers.is_admin(user_id):
            await bot.answer_callback_query(call.id, "üôà –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        user_states.set_user_state(user_id, AdminState.WAITING_FOR_ROOM_NAME)
        user_states.clear_temp_room_data(user_id)
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            "üêí *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã:*",
            parse_mode="Markdown"
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "list_rooms")
    async def list_rooms_callback(call: CallbackQuery):
        user_id = call.from_user.id
        
        if not helpers.is_admin(user_id):
            await bot.answer_callback_query(call.id, "üôà –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        rooms = await db.get_all_rooms()
        
        if not rooms:
            await bot.answer_callback_query(call.id)
            await bot.send_message(
                user_id,
                "üôâ –ö–æ–º–Ω–∞—Ç—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.",
                parse_mode="Markdown"
            )
            return
        
        markup = InlineKeyboardMarkup(row_width=1)
        for room in rooms:
            markup.add(InlineKeyboardButton(
                f"{room['name']} (ID: {room['room_id']})", 
                callback_data=f"room_info_{room['room_id']}"
            ))
        markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_panel"))
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            "*üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("room_info_"))
    async def room_info_callback(call: CallbackQuery):
        user_id = call.from_user.id
        
        if not helpers.is_admin(user_id):
            await bot.answer_callback_query(call.id, "üôà –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        room_id = int(call.data.split("_")[2])
        room = await db.get_room_by_id(room_id)
        
        if not room:
            await bot.answer_callback_query(call.id, "üôä –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        members = await db.get_room_members(room_id)
        members_text = "\n".join([
            f"- {member['username']} (ID: {member['user_id']}, –†–æ–ª—å: {member['role']})"
            for member in members
        ])
        
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É", callback_data=f"admin_enter_room_{room_id}"),
            InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", callback_data=f"export_history_{room_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data=f"delete_room_{room_id}"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_rooms"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            f"*‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ:*  \n"
            f"‚Ä¢ *ID:* `{room['room_id']}`  \n"
            f"‚Ä¢ *–ù–∞–∑–≤–∞–Ω–∏–µ:* _{room['name']}_  \n"
            f"‚Ä¢ *–°–æ–∑–¥–∞–Ω–∞:* _{room['created_at']}_  \n\n"
            f"*üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:*  \n{members_text}",
            reply_markup=markup,
            parse_mode="Markdown"
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_room_"))
    async def delete_room_callback(call: CallbackQuery):
        user_id = call.from_user.id

        if not helpers.is_admin(user_id):
            await bot.answer_callback_query(call.id, "üôà –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return

        room_id = int(call.data.split("_")[2])
        room = await db.get_room_by_id(room_id)

        if not room:
            await bot.answer_callback_query(call.id, "üôä –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        await db.delete_room(room_id)

        await bot.answer_callback_query(call.id, f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ *{room['name']}* (ID: `{room_id}`) —É–¥–∞–ª–µ–Ω–∞.", parse_mode="Markdown")
        markup = helpers.get_admin_panel_markup()
        await bot.send_message(
            user_id,
            "*üêµ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("export_history_"))
    async def export_history_callback(call: CallbackQuery):
        user_id = call.from_user.id
        if not helpers.is_admin(user_id):
            await bot.answer_callback_query(call.id, "üôà –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return

        room_id = int(call.data.split("_")[2])
        buf = await db.export_room_history(room_id)
        await bot.answer_callback_query(call.id, "üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏...")
        await bot.send_document(user_id, InputFile(buf))
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("admin_enter_room_"))
    async def admin_enter_room_callback(call: CallbackQuery):
        user_id = call.from_user.id
        
        if not helpers.is_admin(user_id):
            await bot.answer_callback_query(call.id, "üôà –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        
        room_id = int(call.data.split("_")[3])
        room = await db.get_room_by_id(room_id)
        
        if not room:
            await bot.answer_callback_query(call.id, "üôä –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        is_member = await db.is_user_in_room(user_id, room_id)
        
        if not is_member:
            await db.add_member_to_room(room_id, user_id, "admin")
        
        user_states.set_active_room(user_id, room_id)
        
        markup = helpers.get_room_exit_markup()
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            f"*üêµ –í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É:* _{room['name']}_ (–∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)  \n"
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã.  \n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    
    @bot.message_handler(func=lambda message: user_states.get_user_state(message.from_user.id) == AdminState.WAITING_FOR_ROOM_NAME)
    async def process_room_name(message: Message):
        user_id = message.from_user.id
        room_name = message.text.strip()
        
        if not room_name:
            await bot.send_message(user_id, "üôâ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
            return
        
        user_states.set_temp_room_data(user_id, 'name', room_name)
        user_states.set_user_state(user_id, AdminState.WAITING_FOR_CLIENT_ID)
        
        await bot.send_message(user_id, "üêµ *–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:*", parse_mode="Markdown")
    
    @bot.message_handler(func=lambda message: user_states.get_user_state(message.from_user.id) == AdminState.WAITING_FOR_CLIENT_ID)
    async def process_client_id(message: Message):
        user_id = message.from_user.id
        
        try:
            client_id = int(message.text.strip())
        except ValueError:
            await bot.send_message(user_id, "üôà ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
            return
        
        user_states.set_temp_room_data(user_id, 'client_id', client_id)
        user_states.set_user_state(user_id, AdminState.WAITING_FOR_CODER_ID)
        
        await bot.send_message(user_id, "üêµ *–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞:*", parse_mode="Markdown")
    
    @bot.message_handler(func=lambda message: user_states.get_user_state(message.from_user.id) == AdminState.WAITING_FOR_CODER_ID)
    async def process_coder_id(message: Message):
        user_id = message.from_user.id
        
        try:
            coder_id = int(message.text.strip())
        except ValueError:
            await bot.send_message(user_id, "üôà ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:", parse_mode="Markdown")
            return
        
        temp_data = user_states.get_temp_room_data(user_id)
        temp_data['coder_id'] = coder_id
        
        room_name = temp_data['name']
        client_id = temp_data['client_id']
        
        conn = db.get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (client_id,))
        client_exists = cursor.fetchone() is not None
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (coder_id,))
        coder_exists = cursor.fetchone() is not None
        conn.close()
        
        if not client_exists:
            await db.add_user(client_id, f"client_{client_id}", "client")
        if not coder_exists:
            await db.add_user(coder_id, f"coder_{coder_id}", "coder")
        
        room_id = await db.create_room(room_name)
        await db.add_member_to_room(room_id, client_id, "client")
        await db.add_member_to_room(room_id, coder_id, "coder")
        
        user_states.clear_temp_room_data(user_id)
        user_states.set_user_state(user_id, AdminState.IDLE)
        
        await bot.send_message(
            user_id,
            f"‚úÖ *–ö–æ–º–Ω–∞—Ç–∞ '{room_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!* üêµ\n"
            f"‚Ä¢ *ID –∫–æ–º–Ω–∞—Ç—ã:* `{room_id}`\n"
            f"‚Ä¢ *–ö–ª–∏–µ–Ω—Ç:* `{client_id}`\n"
            f"‚Ä¢ *–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç:* `{coder_id}`",
            parse_mode="Markdown"
        )
        
        try:
            await bot.send_message(
                client_id,
                f"üêµ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É '*{room_name}*'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        
        try:
            await bot.send_message(
                coder_id,
                f"üêµ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É '*{room_name}*'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É: {e}")
