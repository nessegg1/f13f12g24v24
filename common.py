import logging
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import db
from states import user_states
from utils import helpers

logger = logging.getLogger(__name__)

def register_common_handlers(bot: AsyncTeleBot):
    @bot.message_handler(commands=['start'])
    async def start_command(message: Message):
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        
        await db.add_user(user_id, username)
        
        if helpers.is_admin(user_id):
            markup = helpers.get_main_menu_markup(user_id)
            
            await bot.send_message(
                user_id,
                "*üêµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç!*  \n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                reply_markup=markup,
                parse_mode="Markdown"
            )
        else:
            rooms = await db.get_user_rooms(user_id)
            
            if not rooms:
                markup = helpers.get_main_menu_markup(user_id)
                
                await bot.send_message(
                    user_id,
                    "*üôà –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!*  \n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –û–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ –∫–æ–º–Ω–∞—Ç—É.",
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
            elif len(rooms) == 1:
                room = rooms[0]
                room_id = room['room_id']
                
                user_states.set_active_room(user_id, room_id)
                
                markup = helpers.get_room_exit_markup()
                
                await bot.send_message(
                    user_id,
                    f"*üêµ –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!*  \n\n"
                    f"–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: {room['name']}  \n"
                    f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã.  \n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.",
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
            else:
                markup = InlineKeyboardMarkup(row_width=1)
                for room in rooms:
                    markup.add(InlineKeyboardButton(
                        room['name'], 
                        callback_data=f"enter_room_{room['room_id']}"
                    ))
                    
                await bot.send_message(
                    user_id,
                    "*üôà –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Monkey Studio!*  \n\n"
                    "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Ö–æ–¥–∞:",
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
    
    @bot.callback_query_handler(func=lambda call: call.data == "view_rooms")
    async def view_rooms_callback(call: CallbackQuery):
        user_id = call.from_user.id
        rooms = await db.get_user_rooms(user_id)
        
        if not rooms:
            await bot.answer_callback_query(call.id)
            
            markup = helpers.get_back_to_main_menu_markup()
            
            await bot.send_message(
                user_id, 
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.",
                reply_markup=markup
            )
            return
        
        markup = InlineKeyboardMarkup(row_width=1)
        for room in rooms:
            markup.add(InlineKeyboardButton(
                room['name'], 
                callback_data=f"enter_room_{room['room_id']}"
            ))
        markup.add(InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            "–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:",
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "main_menu")
    async def main_menu_callback(call: CallbackQuery):
        user_id = call.from_user.id
        
        markup = helpers.get_main_menu_markup(user_id)
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("enter_room_"))
    async def enter_room_callback(call: CallbackQuery):
        user_id = call.from_user.id
        room_id = int(call.data.split("_")[2])
        
        if not await db.is_user_in_room(user_id, room_id):
            await bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
            return
        
        room = await db.get_room_by_id(room_id)
        if not room:
            await bot.answer_callback_query(call.id, "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        user_states.set_active_room(user_id, room_id)
        
        markup = helpers.get_room_exit_markup()
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            f"–í—ã –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: {room['name']}\n"
            f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã.\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.",
            reply_markup=markup
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "exit_room")
    async def exit_room_callback(call: CallbackQuery):
        user_id = call.from_user.id
        
        if not user_states.is_user_in_active_room(user_id):
            await bot.answer_callback_query(call.id, "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
            return
        
        user_states.clear_active_room(user_id)
        
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–ú–æ–∏ –∫–æ–º–Ω–∞—Ç—ã", callback_data="view_rooms"),
            InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        await bot.answer_callback_query(call.id)
        await bot.send_message(
            user_id,
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.",
            reply_markup=markup
        )
